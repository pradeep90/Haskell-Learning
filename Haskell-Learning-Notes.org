			    Haskell Learning Notes

* Applicative functors
** VVIP (+) <$> (+ 3) <*> (* 100) $ 5
*** = pure (+) <*> (+ 3) <*> (* 100) $ 5
*** = (r -> (+)) <*> (r -> (r + 3)) <*> (r -> (r * 100)) $ 5
*** ULTIMATE Note that (r -> f) <*> (r -> x) = (r -> (f x))
*** = (r -> ((+) (r + 3)) <*> (r -> (r * 100)) $ 5
*** = (r -> (+) (r + 3) (r * 100)) $ 5
*** = 508
** VVIP sequenceA [(>4), (<10), odd] 7
*** sequenceA [Just 1, Just 2, Just 3]
**** = Just [1, 2, 3]
*** sequenceA [(>4), (<10), odd] 7
*** = (sequenceA [(r -> (r > 4)), (r -> (r < 10)), (r -> (odd r))]) 7
*** = (r -> [(r > 4), (r < 10), (odd r)]) 7
*** = [True, False, True]
** Lists as applicative functors
*** Think of them as functors that are confused about what value to return
*** So, they return all possible values
*** e.g., Just 3 will give up 3 as its value
*** But [1, 2, 3] will give up 1, 2, and 3 as its values
** sequenceA [[1, 2], [3, 4]]
*** = [[1,3], [1, 4], [2, 3], [2, 4]]
* Monads
** filterM
*** Power set - Found this out COMPLETELY by accident - Was trying everything else
    filterM (\_ -> [True, False]) [1..4]
* Arithmetic stuff
** rem vs mod
   #+BEGIN_SRC haskell
*Main Data.List Control.Applicative> [quot, rem, div, mod] <*> [3] <*> [2]
[1,1,1,1]
*Main Data.List Control.Applicative> [quot, rem, div, mod] <*> [-3] <*> [2]
[-1,-1,-2,1]

   #+END_SRC
